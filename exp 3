import numpy as np 
import matplotlib.pyplot as plt 
from keras.datasets import mnist 
from keras.models import Sequential 
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D 
from keras.utils import to_categorical 
(x_train, y_train), (x_test, y_test) = mnist.load_data() 
x_train = x_train.astype('float32') / 255.0 
x_test = x_test.astype('float32') / 255.0 
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)) 
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)) 
y_train = to_categorical(y_train, num_classes=10) 
y_test = to_categorical(y_test, num_classes=10) 
model = Sequential([ 
Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)), 
MaxPooling2D(pool_size=(2, 2)), 
Conv2D(64, (3, 3), activation='relu'), 
MaxPooling2D(pool_size=(2, 2)), 
Flatten(), 
Dense(128, activation='relu'), 
Dense(10, activation='softmax') 
]) 
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) 
history = model.fit(x_train, y_train, epochs=10, batch_size=128, validation_split=0.2) 
test_loss, test_accuracy = model.evaluate(x_test, y_test) 
print(f'Test accuracy: {test_accuracy:.4f}') 
plt.plot(history.history['accuracy'], label='Train Accuracy') 
plt.plot(history.history['val_accuracy'], label='Validation Accuracy') 
plt.title('Training and Validation Accuracy') 
plt.xlabel('Epoch') 
plt.ylabel('Accuracy') 
plt.legend() 
plt.show() 
